function ნაკრებებისგაერთიანება(ნაკრებებისმასივი) {
    return ნაკრებებისმასივი.reduce((გაერთიანება, ნაკრები) => {
      ნაკრები.forEach(ელემენტი => გაერთიანება.add(ელემენტი));
      return გაერთიანება;
    }, new Set());
  }
  
  
  console.log(ნაკრებებისგაერთიანება([new Set([1, 2]), new Set([2, 3]), new Set([3, 4])])); 

  








  function სიმბოლოსიხშირე(სტრინგი) {
    const რუკა = new Map();
    
    for (const სიმბოლო of სტრინგი) {
      if (რუკა.has(სიმბოლო)) {
        რუკა.set(სიმბოლო, რუკა.get(სიმბოლო) + 1);
      } else {
        რუკა.set(სიმბოლო, 1);
      }
    }
    
    return რუკა;
  }
  

  console.log(სიმბოლოსიხშირე("hello")); 



  function ინვერტირებულრუკა(რუკა) {
    const ინვერტირებულრუკა = new Map();
  
    for (const [გასაღები, მნიშვნელობა] of რუკა) {
      ინვერტირებულრუკა.set(მნიშვნელობა, გასაღები);
    }
  
    return ინვერტირებულრუკა;
  }
  

  console.log(ინვერტირებულრუკა(new Map([['a', 1], ['b', 2], ['c', 1]])));



  function სიმეტრიულისხვაობა(ნაკრები1, ნაკრები2) {
    const განსხვავება = new Set(
      [...ნაკრები1].filter(ელემენტი => !ნაკრები2.has(ელემენტი))
    );
  
    ნაკრები2.forEach(ელემენტი => {
      if (!ნაკრები1.has(ელემენტი)) {
        განსხვავება.add(ელემენტი);
      }
    });
  
    return განსხვავება;
  }
  

 console.log(სიმეტრიულისხვაობა(new Set([1, 2, 3]), new Set([3, 4, 5]))); 

  

  